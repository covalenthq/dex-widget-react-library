{"version":3,"file":"main.68687b47882c593a7e54.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAnBA;AATA;AADA;AAXA;AADA;AADA;AADA;AAqDA","sources":["webpack://dex-widget-react-library/./src/components/VolTTpairs7d/VolTTpairs7d.js"],"sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text} from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const VolTTpairs7d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"#FFFFFF\", \"black\");\n  const borderColor = useColorModeValue(\"#0c141c\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"#0c141c\", \"#243036\");\n  \n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/tokens/widget/?key=ckey_4e73d56514984838ab3206fbaf4`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      console.log(itemArr[i])\n      var sampleArr = itemArr[i].total_volume_timeseries_7d;\n      console.log(sampleArr)\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].total_volume_24h_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n\n      finalArr.push({volume24hQuote: itemArr[i].total_volume_24h_quote, tickerPair : itemArr[i].contract_ticker_symbol, volumeQuoteTS: sevenDayArr, volumePercentChange : Math.round(((sevenDayArr[0][7].volumeQuote - sevenDayArr[0][0].volumeQuote) * 100 / (sevenDayArr[0][0].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\n//console.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={0.5}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\" px={10}>\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.volumePercentChange}%\n                </Text>\n                <Box alignItems=\"center\" size = '50px' w=\"60px\">\n                  <LineChart width={50} height={50} data={i.volumeQuoteTS[0]}>\n                    <Line type=\"monotone\" dataKey=\"volumeQuote\" stroke={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n                  </LineChart>\n                </Box>\n                <Square bg='#cacacd' size='0.5px' height='40px' >\n                </Square>\n            </Flex> \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n"],"names":[],"sourceRoot":""}