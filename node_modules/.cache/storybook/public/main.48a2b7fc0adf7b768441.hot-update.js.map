{"version":3,"file":"main.48a2b7fc0adf7b768441.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAUA;AAAA;AAAA;AAAA;AAXA;AAJA;AAmBA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AALA;AADA;AAiBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AANA;AAlBA;AA7BA;AADA;AAXA;AADA;AADA;AADA;AA+EA","sources":["webpack://dex-widget-react-library/./src/components/VolTTpools30d/VolTTpools30d.js"],"sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image, Icon, Square } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\nimport { CONFIG } from \"../../config\";\n\n\nexport const VolTTpools30d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"#a7a7ac\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"#0c141c\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"#0c141c\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/pools/widget/?key=ckey_4e73d56514984838ab3206fbaf4&sort-by=volume`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      var sampleArr = itemArr[i][0].volume_timeseries_30d;\n      var thirtyDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].volume_quote });\n      }\n      thirtyDayArr.push(volumeQuoteArr);\n      console.log(thirtyDayArr)\n\n      finalArr.push({ volume30dQuote: itemArr[i][0].volume_30d_quote, tickerPair : itemArr[i][0].token_0.contract_ticker_symbol + \"-\" + itemArr[i][0].token_1.contract_ticker_symbol + \" \" +\"LP\", volumeQuoteTS: thirtyDayArr, volumePercentChange : Math.round(((thirtyDayArr[0][29].volumeQuote - thirtyDayArr[0][0].volumeQuote) * 100 / (thirtyDayArr[0][0].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"250px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n              <Flex>\n                <Text\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                  fontWeight=\"bold\"\n                >\n                  {i.volumePercentChange}%\n                </Text>\n                <Square bg='#cacacd' size='0.1px' height='30px' >\n                </Square>\n                </Flex>\n              </Flex>\n              <Flex justifyContent=\"space-between\" alignItems=\"center\">\n              <Box>\n                <Text\n                  fontSize=\"sm\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                  <Text\n                  fontSize=\"10px\"\n                  textAlign=\"center\"\n                  color='#bebebe'\n                  opacity='50%'\n                  > Volume Quote \n                  </Text>\n\n                 ${i.volume30dQuote}\n                </Text>\n              </Box>\n              <Flex>\n              <Box alignItems=\"center\" size = '50px' w=\"60px\" >\n              <LineChart width={55} height={55} data={i.volumeQuoteTS[0]}>\n                <Line type=\"monotone\" dataKey=\"volumeQuote\" stroke={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n              </LineChart>\n              </Box>\n              <Square bg='#cacacd' size='0.1px' height='60px' >\n              </Square>\n              </Flex>\n            </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n"],"names":[],"sourceRoot":""}