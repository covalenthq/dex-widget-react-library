{"version":3,"file":"main.acf3e61d7d308a19e691.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAFA;AADA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AA8DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AAiEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AAiEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;;AAEA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAiBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AAXA;AA3BA;AADA;AAXA;AADA;AADA;AADA;AA+DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AAiEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AAiEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAVA;AADA;AAeA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;AADA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AADA;AAkBA;AACA;AACA;AACA;AACA;AALA;AAlDA;AA4DA;AACA;AAEA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AAEA;AACA;AAvJA;AA6JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChMA;AACA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AA8DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AAiEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;;AAMA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AALA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AADA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAXA;AA1BA;AADA;AAXA;AADA;AADA;AADA;AAiEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAUA;AAAA;AAAA;AAAA;AAdA;AAiBA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAAA;AANA;AAeA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAlBA;AA3BA;AADA;AAXA;AADA;AADA;AADA;AAuEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzIA;AACA;AACA;AACA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAUA;AAAA;AAAA;AAAA;AAXA;AAJA;AAmBA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAAA;AALA;AADA;AAiBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AANA;AAlBA;AA7BA;AADA;AAXA;AADA;AADA;AADA;AA+EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClJA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AACA;AACA;;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAnBA;AATA;AADA;AAZA;AADA;AADA;AADA;AAsDA","sources":["webpack://dex-widget-react-library/./src/stories/styles.css","webpack://dex-widget-react-library/./src/stories/styles.css?7edb","webpack://dex-widget-react-library/./src/stories/Requirements.stories.js","webpack://dex-widget-react-library/./src/components/LiqTTpairs24h/LiqTTpairs24h.js","webpack://dex-widget-react-library/./src/components/LiqTTpairs30d/LiqTTpairs30d.js","webpack://dex-widget-react-library/./src/components/LiqTTpairs7d/LiqTTpairs7d.js","webpack://dex-widget-react-library/./src/components/LiqTTpools24h/LiqTTpools24h.js","webpack://dex-widget-react-library/./src/components/LiqTTpools30d/LiqTTpools30d.js","webpack://dex-widget-react-library/./src/components/LiqTTpools7d/LiqTTpools7d.js","webpack://dex-widget-react-library/./src/components/Requirement/Requirement.js","webpack://dex-widget-react-library/./src/components/VolTTpairs24h/VolTTpairs24h.js","webpack://dex-widget-react-library/./src/components/VolTTpairs30d/VolTTpairs30d.js","webpack://dex-widget-react-library/./src/components/VolTTpairs7d/VolTTpairs7d.js","webpack://dex-widget-react-library/./src/components/VolTTpools24h/VolTTpools24h.js","webpack://dex-widget-react-library/./src/components/VolTTpools30d/VolTTpools30d.js","webpack://dex-widget-react-library/./src/components/VolTTpools7d/VolTTpools7d.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".form {\\n    width: 500px;\\n    padding: 25px;\\n    border-radius: 5px;\\n    padding-bottom: 50px;\\n    box-shadow: 0px 0px 5px gray;\\n  }\\n  .form input {\\n    width: 100%;\\n    border: none;\\n    padding: 8px;\\n    outline: none;\\n    margin-top: 25px;\\n    border-radius: 5px;\\n    box-sizing: border-box;\\n    box-shadow: 0px 0px 3px gray;\\n  }\\n  .form button {\\n    width: 100%;\\n    padding: 8px;\\n    border: none;\\n    outline: none;\\n    color: white;\\n    margin-top: 25px;\\n    border-radius: 5px;\\n    box-sizing: border-box;\\n    background-color: rgb(65, 65, 201);\\n  }\\n  .form button:disabled {\\n    cursor: not-allowed;\\n    background-color: lightgray;\\n  }\\n  .form h1 {\\n    font-family: sans-serif;\\n  }\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/stories/styles.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,oBAAoB;IACpB,4BAA4B;EAC9B;EACA;IACE,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,4BAA4B;EAC9B;EACA;IACE,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,kCAAkC;EACpC;EACA;IACE,mBAAmB;IACnB,2BAA2B;EAC7B;EACA;IACE,uBAAuB;EACzB\",\"sourcesContent\":[\".form {\\n    width: 500px;\\n    padding: 25px;\\n    border-radius: 5px;\\n    padding-bottom: 50px;\\n    box-shadow: 0px 0px 5px gray;\\n  }\\n  .form input {\\n    width: 100%;\\n    border: none;\\n    padding: 8px;\\n    outline: none;\\n    margin-top: 25px;\\n    border-radius: 5px;\\n    box-sizing: border-box;\\n    box-shadow: 0px 0px 3px gray;\\n  }\\n  .form button {\\n    width: 100%;\\n    padding: 8px;\\n    border: none;\\n    outline: none;\\n    color: white;\\n    margin-top: 25px;\\n    border-radius: 5px;\\n    box-sizing: border-box;\\n    background-color: rgb(65, 65, 201);\\n  }\\n  .form button:disabled {\\n    cursor: not-allowed;\\n    background-color: lightgray;\\n  }\\n  .form h1 {\\n    font-family: sans-serif;\\n  }\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./styles.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./styles.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from 'react';\\nimport { storiesOf } from '@storybook/react';\\nimport './styles.css';\\nimport { Requirement } from '../components/Requirement';\\n\\nconst stories = storiesOf('App Test', module);\\n\\nstories.add('App', () => {\\n\\nreturn (\\n<> \\n<Requirement \\nchain_id='1284'\\ndex_name='stellaswap'\\n/> \\n\\n</>)\\n});\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"app\":{\"startLoc\":{\"col\":12,\"line\":8},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":19,\"line\":8},\"endBody\":{\"col\":1,\"line\":18}}};\n    \nimport React, { useState } from 'react';\nimport { storiesOf } from '@storybook/react';\nimport './styles.css';\nimport { Requirement } from '../components/Requirement';\n\nconst stories = storiesOf('App Test', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } });\n\nstories.add('App', () => {\n\nreturn (\n<> \n<Requirement \nchain_id='1284'\ndex_name='stellaswap'\n/> \n\n</>)\n});","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const LiqTTpairs24h = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/tokens/widget/?key=ckey_4e73d56514984838ab3206fbaf4`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      console.log(itemArr[i])\n      var sampleArr = itemArr[i].total_liquidity_timeseries_7d;\n      console.log(sampleArr)\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ liquidityQuote: sampleArr[j].total_liquidity_24h_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n\n      finalArr.push({liquidity24hQuote: itemArr[i].total_liquidity_quote, tickerPair : itemArr[i].contract_ticker_symbol, liquidityQuoteTS: sevenDayArr, liquidityPercentChange : Math.round(((sevenDayArr[0][7].liquidityQuote - sevenDayArr[0][6].liquidityQuote) * 100 / (sevenDayArr[0][6].liquidityQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.liquidityPercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.liquidity24hQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\">\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const LiqTTpairs30d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/tokens/widget/?key=ckey_4e73d56514984838ab3206fbaf4`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      //console.log(itemArr[i])\n      var sampleArr = itemArr[i].total_liquidity_timeseries_30d;\n      //console.log(sampleArr)\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ liquidityQuote: sampleArr[j].total_liquidity_24h_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n      finalArr.push({liquidity24hQuote: itemArr[i].total_liquidity_quote, tickerPair : itemArr[i].contract_ticker_symbol, liquidityQuoteTS: sevenDayArr, liquidityPercentChange : Math.round(((sevenDayArr[0][29].liquidityQuote - sevenDayArr[0][0].liquidityQuote) * 100 / (sevenDayArr[0][0].liquidityQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.liquidityPercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.liquidity24hQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\">\n                <LineChart width={100} height={100} data={i.liquidityQuoteTS[0]}>\n                    <Line type=\"monotone\" dataKey=\"liquidityQuote\" stroke={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n                </LineChart>\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image, StatArrow } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const LiqTTpairs7d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/tokens/widget/?key=ckey_4e73d56514984838ab3206fbaf4`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      //console.log(itemArr[i])\n      var sampleArr = itemArr[i].total_liquidity_timeseries_7d;\n      //console.log(sampleArr)\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ liquidityQuote: sampleArr[j].total_liquidity_24h_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n      finalArr.push({liquidity24hQuote: itemArr[i].total_liquidity_quote, tickerPair : itemArr[i].contract_ticker_symbol, liquidityQuoteTS: sevenDayArr, liquidityPercentChange : Math.round(((sevenDayArr[0][7].liquidityQuote - sevenDayArr[0][0].liquidityQuote) * 100 / (sevenDayArr[0][0].liquidityQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.liquidityPercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.liquidity24hQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\">\n                <LineChart width={100} height={100} data={i.liquidityQuoteTS[0]}>\n                    <Line type=\"monotone\" dataKey=\"liquidityQuote\" stroke={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n                </LineChart>\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image, StatArrow } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const LiqTTpools24h = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/pools/widget/?key=ckey_4e73d56514984838ab3206fbaf4&sort-by=volume`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      var sampleArr = itemArr[i][0].liquidity_timeseries_7d;\n      var sevenDayArr = [];\n      //var volumePrecentArray = [];\n      var liquidityQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        liquidityQuoteArr.push({ liquidityQuote: sampleArr[j].liquidity_quote });\n      }\n      sevenDayArr.push(liquidityQuoteArr);\n      console.log(sevenDayArr)\n      finalArr.push({ liquidityQuote: itemArr[i][0].total_liquidity_quote, tickerPair : itemArr[i][0].token_0.contract_ticker_symbol + \"-\" + itemArr[i][0].token_1.contract_ticker_symbol + \" \" +\"LP\", liquidityQuoteTS: sevenDayArr, liquidityPercentChange : Math.round(((sevenDayArr[0][7].liquidityQuote - sevenDayArr[0][6].liquidityQuote) * 100 / (sevenDayArr[0][6].liquidityQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.liquidityPercentChange}%\n                  \n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.liquidityQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\">\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const LiqTTpools30d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/pools/widget/?key=ckey_4e73d56514984838ab3206fbaf4&sort-by=volume`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      var sampleArr = itemArr[i][0].liquidity_timeseries_30d;\n      var sevenDayArr = [];\n      var liquidityQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        liquidityQuoteArr.push({ liquidityQuote: sampleArr[j].liquidity_quote });\n      }\n      sevenDayArr.push(liquidityQuoteArr);\n\n      finalArr.push({ liquidityQuote: itemArr[i][0].total_liquidity_quote, tickerPair : itemArr[i][0].token_0.contract_ticker_symbol + \"-\" + itemArr[i][0].token_1.contract_ticker_symbol + \" \" +\"LP\", liquidityQuoteTS: sevenDayArr, liquidityPercentChange : Math.round(((sevenDayArr[0][29].liquidityQuote - sevenDayArr[0][0].liquidityQuote) * 100 / (sevenDayArr[0][0].liquidityQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.liquidityPercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.liquidityQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\" >\n              <LineChart width={100} height={100} data={i.liquidityQuoteTS[0]}>\n                <Line type=\"monotone\" dataKey=\"liquidityQuote\" stroke={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n              </LineChart>\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const LiqTTpools7d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/pools/widget/?key=ckey_4e73d56514984838ab3206fbaf4&sort-by=volume`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      var sampleArr = itemArr[i][0].liquidity_timeseries_7d;\n      var sevenDayArr = [];\n      var liquidityQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        liquidityQuoteArr.push({ liquidityQuote: sampleArr[j].liquidity_quote });\n      }\n      sevenDayArr.push(liquidityQuoteArr);\n\n      finalArr.push({ liquidityQuote: itemArr[i][0].total_liquidity_quote, tickerPair : itemArr[i][0].token_0.contract_ticker_symbol + \"-\" + itemArr[i][0].token_1.contract_ticker_symbol + \" \" +\"LP\", liquidityQuoteTS: sevenDayArr, liquidityPercentChange : Math.round(((sevenDayArr[0][7].liquidityQuote - sevenDayArr[0][0].liquidityQuote) * 100 / (sevenDayArr[0][0].liquidityQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.liquidityPercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.liquidityQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\" >\n              <LineChart width={100} height={100} data={i.liquidityQuoteTS[0]}>\n                <Line type=\"monotone\" dataKey=\"liquidityQuote\" stroke={[i.liquidityPercentChange > 0 ? \"green\" : i.liquidityPercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n              </LineChart>\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image, Spacer } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\nimport { VolTTpools24h } from \"../VolTTpools24h/VolTTpools24h\";\nimport { VolTTpools7d } from \"../VolTTpools7d\";\nimport { VolTTpools30d } from \"../VolTTpools30d\";\nimport { VolTTpairs24h } from \"../VolTTpairs24h\";\nimport { VolTTpairs7d } from \"../VolTTpairs7d/VolTTpairs7d\";\nimport { VolTTpairs30d } from \"../VolTTpairs30d/VolTTpairs30d\";\nimport { LiqTTpools24h } from \"../LiqTTpools24h\";\nimport { LiqTTpools7d } from \"../LiqTTpools7d\";\nimport { LiqTTpools30d } from \"../LiqTTpools30d\";\nimport { LiqTTpairs24h } from \"../LiqTTpairs24h/LiqTTpairs24h\";\nimport { LiqTTpairs7d } from \"../LiqTTpairs7d/LiqTTpairs7d\";\nimport { LiqTTpairs30d } from \"../LiqTTpairs30d/LiqTTpairs30d\";\n\n//API Key\nconst API_KEY = \"ckey_4e73d56514984838ab3206fbaf4\";\nconst LOGO_URL = \"https://media-exp1.licdn.com/dms/image/C560BAQHZftuIJc5OMQ/company-logo_200_200/0/1616601285421?e=2147483647&v=beta&t=j6DJiJFHvVEFGFKU6rki6dFXYO4m3c43X0jKwe6H7_A\"\n\nexport const Requirement = (props) => {\n    const [items, setItems] = useState([]);\n    const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n    const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n    const BoxTextColor = useColorModeValue(\"red\", \"green\");\n    const borderColor = useColorModeValue(\"#0c141c\", \"gray.600\");\n    const BoxBgColor = useColorModeValue(\"#0c141c\", \"#243036\");\n    const [volumeLiquidity, setVolumeLiquidity] = useState('vol');\n    const [tradingCategory, setTradingCategory] = useState('ttpools');\n    const [timeFrame, setTimeFrame] = useState('24h');\n\n\n\n        return (\n            <>                  \n          <Flex\n                bg={BoxBgColor}\n                w=\"full\"\n                borderColor={borderColor}\n          >\n              <Box >\n                  <Select\n                      placeholder=\"Select an option\"\n                      size='xs'\n                      variant='filled'\n                      value={volumeLiquidity}\n                      width='100px'\n                      onChange={(e) => setVolumeLiquidity(e.target.value)}\n                      bgColor={BoxBgColor}\n                      >\n                      <option value=\"vol\">Volume</option>\n                      <option value=\"liquidity\">Liquidity</option>\n                      \n                  </Select>\n              </Box>\n              <Box >\n                  <Select\n                      placeholder=\"Select an option\"\n                      size='xs'\n                      variant='filled'\n                      value={tradingCategory}\n                      onChange={(e) => setTradingCategory(e.target.value)}\n                      bgColor={BoxBgColor}\n                      >\n                      <option value=\"ttpools\">Top trading pools</option>\n                      <option value=\"ttpairs\">Top trading pairs</option>\n                  </Select>\n              </Box>\n              <Box >\n                  <Select\n                      placeholder=\"Select an option\"\n                      size='xs'\n                      variant='filled'\n                      value={timeFrame}\n                      width='70px'\n                      onChange={(e) => setTimeFrame(e.target.value)}\n                      bgColor={BoxBgColor}\n                      >\n                      <option value=\"24h\">24h</option>\n                      <option value=\"7d\">7d</option>\n                      <option value=\"30d\">30d</option>\n                  </Select>\n              </Box>\n              <Spacer />\n              Powered by \n              <Image\n              borderRadius='full'\n              boxSize='30px'\n              objectFit='cover'\n              src='https://media-exp1.licdn.com/dms/image/C560BAQHZftuIJc5OMQ/company-logo_200_200/0/1616601285421?e=2147483647&v=beta&t=j6DJiJFHvVEFGFKU6rki6dFXYO4m3c43X0jKwe6H7_A'\n              alt='Dan Abramov'\n              />\n          </Flex>            \n          {\n                (() => {\n                    if(volumeLiquidity==='vol' && tradingCategory==='ttpools' && timeFrame==='24h') {\n                        return (\n                            <VolTTpools24h\n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )\n                    } \n                    else if (volumeLiquidity==='vol' && tradingCategory==='ttpools' && timeFrame==='7d') {\n                        return (\n                            <VolTTpools7d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='vol' && tradingCategory==='ttpools' && timeFrame==='30d') {\n                        return (\n                            <VolTTpools30d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='vol' && tradingCategory==='ttpairs' && timeFrame==='24h') {\n                        return (\n                            <VolTTpairs24h \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='vol' && tradingCategory==='ttpairs' && timeFrame==='7d') {\n                        return (\n                            <VolTTpairs7d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='vol' && tradingCategory==='ttpairs' && timeFrame==='30d') {\n                        return (\n                            <VolTTpairs30d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='liquidity' && tradingCategory==='ttpools' && timeFrame==='24h') {\n                        return (\n                            <LiqTTpools24h \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='liquidity' && tradingCategory==='ttpools' && timeFrame==='7d') {\n                        return (\n                            <LiqTTpools7d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='liquidity' && tradingCategory==='ttpools' && timeFrame==='30d') {\n                        return (\n                            <LiqTTpools30d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='liquidity' && tradingCategory==='ttpairs' && timeFrame==='24h') {\n                        return (\n                            <LiqTTpairs24h \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='liquidity' && tradingCategory==='ttpairs' && timeFrame==='7d') {\n                        return (\n                            <LiqTTpairs7d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else if (volumeLiquidity==='liquidity' && tradingCategory==='ttpairs' && timeFrame==='30d') {\n                        return (\n                            <LiqTTpairs30d \n                            chain_id={props.chain_id}\n                            dex_name={props.dex_name}\n                            />\n                        )}\n                    else {\n                    return (\n                        <p>Oops! Something's wrong.</p>\n                    )\n                }\n                })()  \n            } \n\n          </>\n        );\n\n    }    \n\n  \n\n\n\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\nimport Marquee from \"react-fast-marquee\";\n\n\nexport const VolTTpairs24h = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/tokens/widget/?key=ckey_4e73d56514984838ab3206fbaf4`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      console.log(itemArr[i])\n      var sampleArr = itemArr[i].total_volume_timeseries_7d;\n      console.log(sampleArr)\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].total_volume_24h_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n\n      finalArr.push({volume24hQuote: itemArr[i].total_volume_24h_quote, tickerPair : itemArr[i].contract_ticker_symbol, volumeQuoteTS: sevenDayArr, volumePercentChange : Math.round(((sevenDayArr[0][7].volumeQuote - sevenDayArr[0][6].volumeQuote) * 100 / (sevenDayArr[0][6].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\n//console.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.volumePercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.volume24hQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\">\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const VolTTpairs30d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/tokens/widget/?key=ckey_4e73d56514984838ab3206fbaf4`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      console.log(itemArr[i])\n      var sampleArr = itemArr[i].total_volume_timeseries_30d;\n      console.log(sampleArr)\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].total_volume_24h_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n\n      finalArr.push({volume24hQuote: itemArr[i].total_volume_24h_quote, tickerPair : itemArr[i].contract_ticker_symbol, volumeQuoteTS: sevenDayArr, volumePercentChange : Math.round(((sevenDayArr[0][29].volumeQuote - sevenDayArr[0][0].volumeQuote) * 100 / (sevenDayArr[0][0].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\n//console.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.volumePercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.volume24hQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\">\n                <LineChart width={100} height={100} data={i.volumeQuoteTS[0]}>\n                    <Line type=\"monotone\" dataKey=\"volumeQuote\" stroke={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n                </LineChart>\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const VolTTpairs7d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"brand.200\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"gray.100\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"gray.200\", \"#243036\");\n  \n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/tokens/widget/?key=ckey_4e73d56514984838ab3206fbaf4`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      console.log(itemArr[i])\n      var sampleArr = itemArr[i].total_volume_timeseries_7d;\n      console.log(sampleArr)\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].total_volume_24h_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n\n      finalArr.push({volume24hQuote: itemArr[i].total_volume_24h_quote, tickerPair : itemArr[i].contract_ticker_symbol, volumeQuoteTS: sevenDayArr, volumePercentChange : Math.round(((sevenDayArr[0][7].volumeQuote - sevenDayArr[0][0].volumeQuote) * 100 / (sevenDayArr[0][0].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\n//console.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n\n                <Text\n                  bg={TextColorMode}\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                >\n                  {i.volumePercentChange}%\n                </Text>\n              </Flex>\n              <Flex>\n              <Box>\n                <Text\n                  fontSize=\"lg\"\n                  fontWeight=\"bold\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                 ${i.volume24hQuote}\n                </Text>\n              </Box>\n              <Box alignItems=\"center\">\n              <LineChart width={100} height={100} data={i.volumeQuoteTS[0]}>\n                <Line type=\"monotone\" dataKey=\"volumeQuote\" stroke={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n              </LineChart>\n              </Box>\n              </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image, Square } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const VolTTpools24h = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"#a7a7ac\");\n  const TextColorMode = useColorModeValue(\"#a7a7ac\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"#0c141c\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"#0c141c\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  console.log(props.chain_id)\n  console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/pools/widget/?key=ckey_4e73d56514984838ab3206fbaf4&sort-by=volume`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      var sampleArr = itemArr[i][0].volume_timeseries_7d;\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].volume_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n\n      finalArr.push({ volume24hQuote: itemArr[i][0].volume_24h_quote, tickerPair : itemArr[i][0].token_0.contract_ticker_symbol + \"-\" + itemArr[i][0].token_1.contract_ticker_symbol + \" \" +\"LP\", volumeQuoteTS: sevenDayArr, volumePercentChange : Math.round(((sevenDayArr[0][7].volumeQuote - sevenDayArr[0][6].volumeQuote) * 100 / (sevenDayArr[0][6].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"250px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n                <Text\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                  fontWeight=\"bold\"\n                > \n                  {i.volumePercentChange}%\n                </Text>\n                <Square bg='#cacacd' size='0.1px' height='30px' >\n                </Square>\n              </Flex>\n              <Flex>\n              <Text\n                  fontSize=\"sm\"\n                  mt={2}\n                  color={TextColorMode}\n                  height='50px'\n                >\n                  <Text\n                  fontSize=\"10px\"\n                  textAlign=\"center\"\n                  color='#84848c'\n                  > \n                  Volume Quote \n                  </Text> \n                 ${i.volume24hQuote}\n                  </Text>\n              <Box alignItems=\"center\" size = '50px' w=\"250px\">\n              </Box>\n              <Square bg='#cacacd' size='0.1px' height='60px' >\n              </Square>\n              </Flex> \n            </Box>\n            \n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image, Icon, Square } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\n\nexport const VolTTpools30d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"#a7a7ac\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"#0c141c\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"#0c141c\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  //console.log(props.chain_id)\n  //console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/pools/widget/?key=ckey_4e73d56514984838ab3206fbaf4&sort-by=volume`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      var sampleArr = itemArr[i][0].volume_timeseries_30d;\n      var thirtyDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].volume_quote });\n      }\n      thirtyDayArr.push(volumeQuoteArr);\n      console.log(thirtyDayArr)\n\n      finalArr.push({ volume30dQuote: itemArr[i][0].volume_30d_quote, tickerPair : itemArr[i][0].token_0.contract_ticker_symbol + \"-\" + itemArr[i][0].token_1.contract_ticker_symbol + \" \" +\"LP\", volumeQuoteTS: thirtyDayArr, volumePercentChange : Math.round(((thirtyDayArr[0][29].volumeQuote - thirtyDayArr[0][0].volumeQuote) * 100 / (thirtyDayArr[0][0].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"250px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={3}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            borderColor=\"red.400\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText}>\n                  {i.tickerPair}\n                </Text>\n              <Flex>\n                <Text\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                  fontWeight=\"bold\"\n                >\n                  {i.volumePercentChange}%\n                </Text>\n                <Square bg='#cacacd' size='0.1px' height='30px' >\n                </Square>\n                </Flex>\n              </Flex>\n              <Flex justifyContent=\"space-between\" alignItems=\"center\">\n              <Box>\n                <Text\n                  fontSize=\"sm\"\n                  mt={2}\n                  color={TextColorMode}\n                >\n                  <Text\n                  fontSize=\"10px\"\n                  textAlign=\"center\"\n                  color='#bebebe'\n                  opacity='50%'\n                  > Volume Quote \n                  </Text>\n\n                 ${i.volume30dQuote}\n                </Text>\n              </Box>\n              <Flex>\n              <Box alignItems=\"center\" size = '50px' w=\"60px\" >\n              <LineChart width={55} height={55} data={i.volumeQuoteTS[0]}>\n                <Line type=\"monotone\" dataKey=\"volumeQuote\" stroke={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n              </LineChart>\n              </Box>\n              <Square bg='#cacacd' size='0.1px' height='60px' >\n              </Square>\n              </Flex>\n            </Flex>  \n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n","import React, { useEffect, useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line } from 'recharts';\nimport { Box, Flex, useColorModeValue, Text, Center, Select, Image, Square } from \"@chakra-ui/react\";\nimport Ticker from \"react-ticker\";\n\nexport const VolTTpools7d = (props) => {\n  const [finalData, setFinalData] = useState([]);\n  const chainNameText = useColorModeValue(\"black\", \"gray.500\");\n  const TextColorMode = useColorModeValue(\"#a7a7ac\", \"brand.300\");\n  const BoxTextColor = useColorModeValue(\"red\", \"green\");\n  const borderColor = useColorModeValue(\"#0c141c\", \"gray.600\");\n  const BoxBgColor = useColorModeValue(\"#0c141c\", \"#243036\");\n  let blockchain_id = props.chain_id\n  let dex_name = props.dex_name\n  //console.log('These are the props value!')\n  console.log(props.chain_id)\n  console.log(props.dex_name)\n\n  useEffect(() => {\n    var config = {\n      method: \"get\",\n      url: `https://api.covalenthq.com/v1/${blockchain_id}/xy=k/${dex_name}/pools/widget/?key=ckey_4e73d56514984838ab3206fbaf4&sort-by=volume`,\n      headers: {},\n    };\n\n    axios(config)\n      .then(function (response) {\n        objTraversal(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  var finalArr = [];\n \n  \n\n  function objTraversal(obj) {\n    var itemArr = obj.data.items;\n\n\n\n    for (let i = 0; i < itemArr.length; i++) {\n      var sampleArr = itemArr[i][0].volume_timeseries_7d;\n      var sevenDayArr = [];\n      var volumePrecentArray = [];\n      var volumeQuoteArr = [];\n      for (let j = 0; j < sampleArr.length; j++) {\n        volumeQuoteArr.push({ volumeQuote: sampleArr[j].volume_quote });\n      }\n      sevenDayArr.push(volumeQuoteArr);\n\n      finalArr.push({ volume7dQuote: itemArr[i][0].volume_7d_quote, tickerPair : itemArr[i][0].token_0.contract_ticker_symbol + \"-\" + itemArr[i][0].token_1.contract_ticker_symbol + \" \" +\"LP\", volumeQuoteTS: sevenDayArr, volumePercentChange : Math.round(((sevenDayArr[0][7].volumeQuote - sevenDayArr[0][0].volumeQuote) * 100 / (sevenDayArr[0][0].volumeQuote)+ Number.EPSILON)*100)/100 });\n      \n    }\n    setFinalData(finalArr);\n    }\n\n\n\nconsole.log(finalData);\n\nreturn (\n    <>\n    <Ticker offset=\"run-in\" speed={10}>\n      {({}) => (\n        <Flex\n          borderRadius=\"xl\"\n          bg={BoxBgColor}\n          p={0.1}\n          w=\"full\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          borderColor={borderColor}\n          borderWidth={1}\n          mb={8}\n\n        >\n            {finalData.map((i) => (\n            <Box \n            w=\"300px\"\n            maxW=\"xs\"\n            mx=\"auto\"\n            px={2}\n            py={0.5}\n            bg={BoxBgColor}\n            shadow=\"md\"\n            >\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Text fontSize=\"md\" color={chainNameText} px={10}>\n                  {i.tickerPair}\n                </Text>\n                <Text\n                  color={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]}\n                  px={3}\n                  py={1}\n                  rounded=\"full\"\n                  fontSize=\"xs\"\n                  fontWeight=\"bold\"\n                >\n                  {i.volumePercentChange}%\n                </Text>\n                <Box alignItems=\"center\" size = '50px' w=\"60px\">\n                    <LineChart width={50} height={50} data={i.volumeQuoteTS[0]}>\n                      <Line type=\"monotone\" dataKey=\"volumeQuote\" stroke={[i.volumePercentChange > 0 ? \"green\" : i.volumePercentChange < 0 ? \"red\" : \"yellow\"]} dot={false}/>\n                    </LineChart>\n                  </Box>\n                <Square bg='#cacacd' size='0.1px' height='40px' >\n                </Square>\n            </Flex>\n            </Box>\n            ))}\n        </Flex>\n      )}\n    </Ticker>\n    </>\n  );\n};\n\n"],"names":[],"sourceRoot":""}